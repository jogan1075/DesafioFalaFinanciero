apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
//apply plugin: 'jacoco-android'
apply from: './jacoco.gradle'


android {
    compileSdkVersion 28

    defaultConfig {
        applicationId "com.jmc.tecnicaltestfifjmc"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}



dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.google.android.material:material:1.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.5"
    testImplementation "org.jacoco:org.jacoco.agent:0.8.3"
    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:2.9.0"
    implementation "com.squareup.retrofit2:converter-moshi:2.9.0"
    implementation "com.squareup.okhttp3:logging-interceptor:4.7.2"
    testImplementation "com.squareup.okhttp3:mockwebserver:4.7.2"
    implementation "com.squareup.okhttp3:okhttp:4.7.2"


    // Lifecycle (ViewModel + LiveData)
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    kapt "androidx.lifecycle:lifecycle-compiler:$lifecycleVersion"
    implementation "android.arch.core:core-testing:$lifecycleVersion"

    // Room
    implementation "android.arch.persistence.room:runtime:$roomVersion"
    kapt "android.arch.persistence.room:compiler:$roomVersion"
    androidTestImplementation "android.arch.persistence.room:testing:$roomVersion"


    implementation 'androidx.multidex:multidex:2.0.1'

    implementation "bouncycastle:bcprov-jdk16:136"

    implementation "org.koin:koin-android:2.0.1"
    implementation "org.koin:koin-androidx-scope:2.0.1"
    implementation "org.koin:koin-androidx-viewmodel:2.0.1"
    implementation "org.koin:koin-androidx-ext:2.0.1"

}



//task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
//    reports {
//        xml.enabled = true
//        html.enabled = true
//    }
//
//    def fileFilter = ['**/R.class',
//                      '**/R$*.class',
//                      '**/BuildConfig.*',
//                      '**/Manifest*.*',
//                      '**/*Test*.*',
//                      'android/**/*.*',
//                      '**/data/models/*']
//    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
//    def mainSrc = "${project.projectDir}/src/main/java"
//
////    sourceDirectories = files([mainSrc])
////    sourceDirectories.setFrom files([mainSrc])
////    classDirectories.setFrom files([debugTree]
//    def javaClasses = fileTree(dir: variant.javaCompiler.destinationDir, excludes: excludes)
//    def kotlinClasses = fileTree(dir: "${buildDir}/tmp/kotlin-classes/${variantName}", excludes: excludes)
//    classDirectories.setFrom = files([javaClasses, kotlinClasses])
//    executionData.setFrom fileTree(dir: "$buildDir", includes: [
//            "jacoco/testDebugUnitTest.exec",
//            "outputs/code-coverage/connected/*coverage.ec"
//    ])
//
//}